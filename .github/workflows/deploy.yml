name: Blue-Green Deployment

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/dockerized-service-deployment:latest
          echo "Building Docker Image: $IMAGE_NAME"
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME
          echo "Docker Image Pushed Successfully."

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Determine Active Server
        id: active-server
        run: |
          set -e
          echo "Checking which server is active..."
          
          if curl -s --max-time 5 http://${{ secrets.BLUE_HOST }}:8080 > /dev/null; then
            echo "BLUE server is active. Deploying to GREEN..."
            echo "TARGET_HOST=${{ secrets.GREEN_HOST }}" >> $GITHUB_ENV
          else
            echo "GREEN server is active or BLUE is down. Deploying to BLUE..."
            echo "TARGET_HOST=${{ secrets.BLUE_HOST }}" >> $GITHUB_ENV
          fi

      - name: Debug Server Connection
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.TARGET_HOST }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "üîç Checking server details..."
            uname -a
            docker --version
            docker ps -a

      - name: Deploy to Target Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.TARGET_HOST }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/dockerized-service-deployment:latest
            echo "üì¶ Pulling the latest Docker image: $IMAGE_NAME"
            docker pull $IMAGE_NAME
            
            echo "üõë Stopping existing container (if running)..."
            docker stop my_app || true
            docker rm my_app || true

            echo "üöÄ Running new container..."
            docker run -d --name my_app -p 8080:8080 $IMAGE_NAME

            echo "‚úÖ Deployment completed. Running containers:"
            docker ps

      - name: Health Check
        run: |
          echo "‚è≥ Waiting for service to start..."
          sleep 10
          echo "üîç Checking service availability..."
          if curl -s --max-time 10 http://${{ env.TARGET_HOST }}:8080; then
            echo "‚úÖ Deployment successful!"
          else
            echo "‚ùå Deployment failed!" && exit 1
          fi
