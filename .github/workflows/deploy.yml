name: Blue-Green Deployment

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/blue-green:latest
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Determine Active Server
        id: active-server
        run: |
          BLUE_STATUS=$(curl -s --max-time 5 http://${{ secrets.BLUE_HOST }}:3000 || true)
          GREEN_STATUS=$(curl -s --max-time 5 http://${{ secrets.GREEN_HOST }}:3000 || true)

          if [[ -n "$BLUE_STATUS" ]]; then
            echo "BLUE is active. Deploying to GREEN..."
            echo "TARGET_HOST=${{ secrets.GREEN_HOST }}" >> "$GITHUB_ENV"
          elif [[ -n "$GREEN_STATUS" ]]; then
            echo "GREEN is active. Deploying to BLUE..."
            echo "TARGET_HOST=${{ secrets.BLUE_HOST }}" >> "$GITHUB_ENV"
          else
            echo "No active instance found! Defaulting to BLUE..."
            echo "TARGET_HOST=${{ secrets.BLUE_HOST }}" >> "$GITHUB_ENV"
          fi

      - name: Deploy to Target Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.TARGET_HOST }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/blue-green:latest
            echo "🚀 Pulling latest image..."
            docker pull $IMAGE_NAME

            echo "🛑 Stopping existing container (if any)..."
            docker stop my_app || true
            docker rm my_app || true

            echo "🚀 Running new container..."
            docker run -d --name my_app -p 3000:3000 $IMAGE_NAME

      - name: Health Check
        run: |
          echo "⏳ Waiting for service to start..."
          sleep 10
          echo "🔍 Checking service availability..."
          if curl -s --max-time 10 http://${{ env.TARGET_HOST }}:3000; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!" && exit 1
          fi
